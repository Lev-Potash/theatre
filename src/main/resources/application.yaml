#management:
#  endpoints:
#    web:
#      exposure:
##        настраиваем метрики, которые хотим чтобы отдавал актуатор
#        include: health, prometheus
##        включаем экспорт метрик через prometheus
#  metrics:
#    export:
#      prometheus:
#        enabled: true
#    distribution:
#      percentiles-histogram:
#        "[http.server.requests]": true


spring:
  profiles:
    active: dev
  devtools:
    restart:
      enabled: false
#  security:
#    oauth2:
#      resourceserver:
#        jwt:
#          # URL сревера авторизации, при обращении к которому можно получить открытый ключ
#          jwk-set-uri: http://localhost:9000/oauth2/jwks
#      client:
#        registration:
#          theatre-admin-client:
#            provider: theatre_authorization_server
#            client-id: theatre-admin-client
#            client-secret: secret
#            authorization-grant-type: authorization_code
#            redirect-uri: "http://localhost:9090/login/oauth2/code/{registrationId}"
#            scope:
#              - writeClients
#              - deleteClients
#              - updateClients
#              - openid
#            issuer-uri: http://localhost:9000

#        provider:
#          theatre:
#            issuer-uri: http://localhost:9000


theatre:
  clients:
    size: 1
---
spring:
  profiles: dev

  #  datasource:
  #    driver-class-name: org.postgresql.Driver
  #    url: jdbc:postgresql://localhost:5432/postgres?currentSchema=boot
  #    username: postgres
  #    password: 123456

  #spring.data.mongodb.host= localhost
  #spring.data.mongodb.port= 27017;
  #spring.data.mongodb.username= theatre;
  #spring.data.mongodb.password= 123456;
  #spring.data.mongodb.database= theatredb;

  #spring.flyway.check-location=true
#  flyway:
#    baselineOnMigrate: true
#    locations: classpath:db/migration
#    schemas: public
#    enabled: true
#    #????? ?? ?????? ??????????? ????? ????? ????????
#    validate-on-migrate: false


server:
  port: 9090
logging:
  file:
    path: D:/crypto/logs/
    name: theatre.log
  level:
    root: INFO
    org.springframework.security: DEBUG


---

spring:
  profiles: prod
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://localhost:5432/postgres?currentSchema=boot
    username: postgres
    password: 123456

  #spring.data.mongodb.host= localhost
  #spring.data.mongodb.port= 27017;
  #spring.data.mongodb.username= theatre;
  #spring.data.mongodb.password= 123456;
  #spring.data.mongodb.database= theatredb;

  #spring.flyway.check-location=true
  flyway:
    baselineOnMigrate: true
    locations: classpath:db/migration
    schemas: public
    enabled: true
  #????? ?? ?????? ??????????? ????? ????? ????????
    validate-on-migrate: false
#    cleanDisabled: false
server:
  port: 8443
  # The format used for the keystore. It could be set to JKS in case it is a JKS file
#  server.ssl.key-store-type=PKCS12
  # The path to the keystore containing the certificate
#  server.ssl.key-store=classpath:keystore/baeldung.p12
  # The password used to generate the certificate
#  server.ssl.key-store-password=password
  # The alias mapped to the certificate
#  server.ssl.key-alias=baeldung
  # The application applies only https requests
#  server.ssl.enabled=true
  ssl:
    key-store-type: PKCS12
    key-store: classpath:keystore/mykeys.p12
    key-store-password: 123456
    key-alias: mykeys
    enabled: true
#Во-первых, нам нужно создать хранилище доверия.
#Поскольку мы создали файл PKCS12, мы можем использовать то же самое, что и хранилище доверия.
#Давайте определим новые свойства для сведений о хранилище доверия:
#  #trust store location
#  trust.store=classpath:keystore/baeldung.p12
#  #trust store password
#  trust.store.password=password
#    server.ssl.trust-store=classpath:foo.jks
#    server.ssl.trust-store-password=password

    trust-store-type: pkcs12
    trust-store: classpath:truststore/truststore.pfx
    trust-store-password: 123456

#keytool -genkeypair -alias baeldung -keyalg RSA -keysize 2048 -storetype PKCS12 -keystore baeldung.p12 -validity 3650


#keytool -genkeypair -alias baeldung -keyalg RSA -keysize 2048 -keystore baeldung.jks -validity 3650

#openssl req -newkey rsa:2048 -nodes -keyout private.key -x509 -out cert.crt
#
#keytool -importcert -alias oba-trust -file cert.crt -keystore truststore.jks
#
#keytool -importkeystore -srckeystore truststore.jks -destkeystore truststore.pfx -srcstoretype JKS -deststoretype PKCS12 -deststorepass yourpassword

#  Настройки для ключей в формате .jks
#    key-store: classpath:mykeys.jks
#    key-store: file:///D:/crypto/mykeys.jks
#    key_store-password: 123456
#    key-password: 123456

logging:
  file:
    path: D:/crypto/logs/
    name: theatre.log
  level:
    root: WARN
    org.springframework.security: DEBUG



#  security:
#    oauth2:
#      client:
##        clientId: 51716120
##        clientSecret: 3DCI8scWps6rb1UELrNf
##        accessTokenUri: https://oauth.vk.com/access_token
##        userAuthorizationUri: https://oauth.vk.com/authorize
##        tokenName: code
##        authenticationScheme: query
##        clientAuthenticationScheme: form
##        grant-type: authorization_code
#        registration:
#          vk:
#            clientId: 51716120
#            clientSecret: 3DCI8scWps6rb1UELrNf
#      resource:
#        userInfoUri: https://api.vk.com/method/users.get